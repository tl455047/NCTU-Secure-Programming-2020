#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import sys
import gdb


class Exploit(gdb.Command):
    def __init__ (self):
        super(Exploit, self).__init__("exploit",
                                      gdb.COMMAND_SUPPORT,
                                      gdb.COMPLETE_FILENAME,
                                      True)
        self.ans = [str(i) for i in range(36)] 
    def invoke(self, arg, from_tty):
        
        print('[*] setting configs...')       
        gdb.execute('set pagination off')
        gdb.execute('break *0x0048e6bd')
        gdb.execute('break *0x0048e70a')
        gdb.execute('file ./gogo')

        current_index = 15
        #reach every input
        for k in range(36):
            #search input
            for i in range(30, 128):    
                #set input
                self.generate_input(current_index, i)
                # run program
                gdb.execute('r < input.txt > output.txt')
                #go to latest loop num
                for j in range(k):
                    gdb.execute('c')
                    gdb.execute('c')
                #get latest current index
                current_index = self.get_current_index()
                #go to 0x48e70a
                gdb.execute('c')
                #check rcx and rdx
                if self.get_rcx_equal_rdx() == True:
                    sys.stderr.write(str(k) + ': index: ' + str(current_index) +' ' +  chr(int(self.ans[current_index])) + '\n')
                    if k == 35:
                        break
                    #go to 0x48e6bd
                    gdb.execute('c')
                    #get next index
                    current_index = self.get_current_index()
                    break

        sys.stderr.write(''.join([chr(int(num)) for num in self.ans]))
        
    def get_rcx_equal_rdx(self):
        rcx = gdb.parse_and_eval('$rcx')
        rdx = gdb.parse_and_eval('$rdx')
        return rcx == rdx

    def get_current_index(self):
        current_index = gdb.parse_and_eval('$rcx')
        return current_index

    def generate_input(self, now_index, value):
        self.ans[now_index] = str(value)
        with open('input.txt', 'w+') as f:
        	f.write('x' + ','.join(self.ans) + 'x')
        	
Exploit()
